import re
import textwrap
from functools import wraps
from typing import List

from pydantic import BaseModel


class ResponseContent(BaseModel):
    content: str
    type: str


def singleton(cls):
    instances = {}

    @wraps(cls)
    def get_instance(*args, **kwargs):
        if cls not in instances:
            instances[cls] = cls(*args, **kwargs)
        return instances[cls]

    return get_instance


@singleton
class ChatResponseConverter:
    @staticmethod
    def parse_response(response: str) -> str:
        lines = response.splitlines()

        parsed_lines = []

        for line in lines:
            parsed_line = line.split(':')[1].strip().strip('"')
            parsed_lines.append(parsed_line)

        return ''.join(parsed_lines)

    @staticmethod
    def clean_text(response: str) -> str:
        # Split the input text into lines
        lines = text.splitlines()

        # Initialize a list to hold the cleaned lines
        cleaned_lines = []

        # Iterate through each line
        for line in lines:
            # Remove the '0:' prefix if it exists
            if line.startswith('0:'):
                cleaned_line = line[2:]  # Remove the '0:' part
            else:
                cleaned_line = line  # No '0:' to remove

            # Append the cleaned line to the list
            cleaned_lines.append(cleaned_line)

        # Join the cleaned lines into a single string
        formatted_text = '\n'.join(cleaned_lines)

        return formatted_text

# Example usage
# Example usage
text = """0:"Okay"
0:"."
0:"\n"
0:"Here"
0:"'s"
0:" a"
0:" possible"
0:" route"
0:" configuration"
0:" in"
0:" docker"
0:"-"
0:"com"
0:"pose"
0:"-"
0:"mysql"
0:"-"
0:"route"
0:"."
0:"yaml"
0:" for"
0:" creating"
0:" a"
0:" database"
0:" called"
0:" my"
0:"db"
0:" using"
0:" the"
0:" mysql"
0:":"
0:"latest"
0:" image"
0:"."
0:"\n"
0:"```"
0:" "
0:"\n"
0:"version"
0:":"
0:" '"
0:"3"
0:"'"
0:"\n"
0:"services"
0:":"
0:"\n"
0:"  "
0:"web"
0:"app"
0:":"
0:"\n"
0:"    "
0:"build"
0:":."
0:"\n"
0:"    "
0:"ports"
0:":"
0:"\n"
0:"      "
0:"-"
0:" \""
0:"5000"
0:":"
0:"5000"
0:"\""
0:"\n"
0:"    "
0:"dep"
0:"ends"
0:"_"
0:"on"
0:":"
0:"\n"
0:"      "
0:"-"
0:" db"
0:"\n"
0:"    "
0:"vol"
0:"umes"
0:":"
0:"\n"
0:"      "
0:"-"
0:"./"
0:"mysql"
0:"_"
0:"data"
0:":/"
0:"var"
0:"/"
0:"lib"
0:"/"
0:"mysql"
0:"\n\n"
0:"  "
0:"db"
0:":"
0:"\n"
0:"    "
0:"image"
0:":"
0:" mysql"
0:":"
0:"latest"
0:"\n"
0:"    "
0:"environment"
0:":"
0:"\n"
0:"      "
0:"M"
0:"YS"
0:"QL"
0:"_"
0:"ROOT"
0:"_"
0:"PASS"
0:"WORD"
0:":"
0:" password"
0:"\n"
0:"      "
0:"M"
0:"YS"
0:"QL"
0:"_"
0:"DAT"
0:"AB"
0:"ASE"
0:":"
0:" my"
0:"db"
0:"\n"
0:"      "
0:"M"
0:"YS"
0:"QL"
0:"_"
0:"USER"
0:":"
0:" username"
0:"\n"
0:"      "
0:"M"
0:"YS"
0:"QL"
0:"_"
0:"PASS"
0:"WD"
0:":"
0:" password"
0:"\n"
0:"    "
0:"vol"
0:"umes"
0:":"
0:"\n"
0:"      "
0:"-"
0:" /"
0:"var"
0:"/"
0:"lib"
0:"/"
0:"mysql"
0:":/"
0:"var"
0:"/"
0:"lib"
0:"/"
0:"mysql"
0:"\n"
0:"\n"
0:"vol"
0:"umes"
0:":"
0:"\n"
0:"  "
0:"mysql"
0:"_"
0:"data"
0:":"
0:"\n"
0:"\n"
0:"Here"
0:"'s"
0:" the"
0:" corresponding"
0:" docker"
0:"-"
0:"com"
0:"pose"
0:"."
0:"yml"
0:" file"
0:" for"
0:" docker"
0:"-"
0:"com"
0:"pose"
0:"-"
0:"mysql"
0:"-"
0:"route"
0:"."
0:"yaml"
0:"\n"
0:"```"
0:" "
0:"\n"
0:"version"
0:":"
0:" '"
0:"3"
0:"'"
0:"\n"
0:"services"
0:":"
0:"\n"
0:"  "
0:"web"
0:"app"
0:":"
0:"\n"
0:"    "
0:"build"
0:":."
0:"\n"
0:"    "
0:"ports"
0:":"
0:"\n"
0:"      "
0:"-"
0:" \""
0:"5000"
0:":"
0:"5000"
0:"\""
0:"\n"
0:"    "
0:"dep"
0:"ends"
0:"_"
0:"on"
0:":"
0:"\n"
0:"      "
0:"-"
0:" db"
0:"\n"
0:"    "
0:"vol"
0:"umes"
0:":"
0:"\n"
0:"      "
0:"-"
0:"./"
0:"mysql"
0:"_"
0:"data"
0:":/"
0:"var"
0:"/"
0:"lib"
0:"/"
0:"mysql"
0:"\n\n"
0:"  "
0:"db"
0:":"
0:"\n"
0:"    "
0:"image"
0:":"
0:" mysql"
0:":"
0:"latest"
0:"\n"
0:"    "
0:"environment"
0:":"
0:"\n"
0:"      "
0:"M"
0:"YS"
0:"QL"
0:"_"
0:"ROOT"
0:"_"
0:"PASS"
0:"WORD"
0:":"
0:" password"
0:"\n"
0:"      "
0:"M"
0:"YS"
0:"QL"
0:"_"
0:"DAT"
0:"AB"
0:"ASE"
0:":"
0:" my"
0:"db"
0:"\n"
0:"      "
0:"M"
0:"YS"
0:"QL"
0:"_"
0:"USER"
0:":"
0:" username"
0:"\n"
0:"      "
0:"M"
0:"YS"
0:"QL"
0:"_"
0:"PASS"
0:"WD"
0:":"
0:" password"
0:"\n"
0:"    "
0:"vol"
0:"umes"
0:":"
0:"\n"
0:"      "
0:"-"
0:" /"
0:"var"
0:"/"
0:"lib"
0:"/"
0:"mysql"
0:":/"
0:"var"
0:"/"
0:"lib"
0:"/"
0:"mysql"
"""


if __name__ == '__main__':
    converter = ChatResponseConverter()
    formatted_response = converter.format_text(text)
    print(formatted_response)
